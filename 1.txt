#include "ServerStorage.h"
#include <pqxx/result>

#include <string>
#include <iostream>
extern "C"
{
#include "unistd.h"
}

using namespace std;

#ifndef BESTIE_SERVERSTORAGE_H
#define BESTIE_SERVERSTORAGE_H

#include <string>
#include <map>
#include <pqxx/pqxx>






cd xx项目
git init
git add .
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/username/xxx.git
git push -u origin main




要运行 C++ 代码，你需要确保在你的系统上安装了以下内容：

C++ 编译器： 通常情况下，Linux 系统上使用的是 g++ 编译器。你可以使用以下命令安装：

bash
Copy code
sudo apt-get update
sudo apt-get install g++
如果你使用的是其他操作系统，请相应安装对应的 C++ 编译器。

OpenSSL 库： 由于你的 CMakeLists.txt 中添加了 -lcrypto，这表示你的项目依赖 OpenSSL 库。你可以使用以下命令安装：

bash
Copy code
sudo apt-get install libssl-dev
libpqxx 库和 PostgreSQL 客户端库： 你的项目还似乎依赖于 libpqxx 和 PostgreSQL 客户端库。你可以使用以下命令安装：

bash
Copy code
sudo apt-get install libpqxx-dev
sudo apt-get install libpq-dev
文件系统库（stdc++fs）： 由于你的 CMakeLists.txt 中添加了 -lstdc++fs，这表示你的项目依赖于 C++ 文件系统库。在较新的 g++ 版本中，该库通常是内置的。

在安装了上述依赖项之后，你可以按照以下步骤来运行你的 C++ 项目：

进入项目目录：

bash
Copy code
cd /path/to/your/bestie/project
创建一个 build 目录：

bash
Copy code
mkdir build
cd build
运行 CMake：

bash
Copy code
cmake ..
编译项目：

bash
Copy code
make
这将生成可执行文件 bestie。

运行项目：

bash
Copy code
./bestie


安装完成后，按照以下步骤运行你的项目：

打开终端，进入项目根目录。

创建一个新的目录（例如，build）作为构建目录：

bash
Copy code
mkdir build
cd build
运行 CMake 生成 Makefile：

bash
Copy code
cmake ..
使用生成的 Makefile 构建项目：

bash
Copy code
make
这将编译你的项目并生成可执行文件 bestie。

运行生成的可执行文件：

bash
Copy code
./bestie


sudo -u postgres psql
CREATE DATABASE bestie;
CREATE USER sse WITH PASSWORD '123456';
ALTER ROLE sse SET client_encoding TO 'utf8';
ALTER ROLE sse SET default_transaction_isolation TO 'read committed';
ALTER ROLE sse SET timezone TO 'UTC';
GRANT ALL PRIVILEGES ON DATABASE bestie TO sse;
\q
sudo service postgresql start





如果您的数据库在测试前没有数据，那么您确实需要先进行数据加载，以确保测试能够正常进行。在这种情况下，您可以修改配置文件，让 BenchBase 在测试前先加载数据，然后在实际运行测试时，只执行查询操作。

修改配置文件步骤：
启用数据加载

在配置文件中将 <load> 标签设置为 true，这样 BenchBase 在开始测试前会先加载数据。
xml
Copy code
<load>true</load>
配置事务类型

如之前所述，在 <transactiontypes> 部分，您可以设置想要运行的事务类型。如果您只想进行查询操作，可以将所有修改（插入、更新、删除）类事务的比例设置为0。
设置执行参数

确保 <execute> 标签设置为 true，这样在加载数据后，BenchBase 会开始执行测试。
调整比例

根据您的需求调整各类事务的比例，确保只执行查询类事务。
示例：
xml
Copy code
<load>true</load>
<execute>true</execute>

<transactiontypes>
    <transactiontype>
        <name>NewOrder</name>
        <ratio>0</ratio>
    </transactiontype>
    <transactiontype>
        <name>Payment</name>
        <ratio>0</ratio>
    </transactiontype>
    <transactiontype>
        <name>OrderStatus</name>
        <ratio>50</ratio>
    </transactiontype>
    <transactiontype>
        <name>Delivery</name>
        <ratio>0</ratio>
    </transactiontype>
    <transactiontype>
        <name>StockLevel</name>
        <ratio>50</ratio>
    </transactiontype>
</transactiontypes>
在上述配置中，BenchBase 将在测试开始时加载数据，然后只执行查询类型的事务（如“订单状态”和“库存级别”），其余涉及数据修改的事务比例被设置为0。

注意事项：
确保数据库具有足够的初始容量来存储加载的数据。
数据加载过程可能需要一定的时间，这取决于您的数据库大小和硬件性能。
在实际测试开始前，确保数据加载正确完成。您可能需要检查数据库以确认数据是否已经准备就绪。













. 定位配置文件：
在 BenchBase 的文件结构中找到与您想运行的基准测试相关的配置文件，例如对于 TPC-C，文件可能位于 config/postgres/sample_tpcc_config.xml。
2. 编辑配置文件：
打开配置文件进行编辑。您可以使用任何文本编辑器进行此操作。
3. 主要配置参数：
数据库连接：设置数据库的类型、主机地址、端口、数据库名称、用户名和密码等。
基准测试参数：设置如事务类型、事务比例、测试持续时间、客户端数量等。
加载参数：配置是否加载数据以及数据的规模。
4. 事务类型和比例：
在 TPC-C 测试中，您可以定义不同类型事务（如新订单、支付、库存查询等）的比例。
修改 <transactiontypes> 部分中的 <transactiontype> 标签来调整每种事务类型的比例。
5. 性能和持续时间设置：
配置测试的持续时间、启动客户端（线程）数量等。
调整 <time> 和 <clients> 标签来设置测试持续时间和并发客户端数量。
6. 数据加载设置：
如果您需要预先加载数据，可以在配置文件中设置。
修改 <load> 标签来控制是否加载数据以及数据的规模。
7. 保存和运行测试：
保存对配置文件的更改。
运行 BenchBase，指定已修改的配置文件。
示例配置调整：
假设您想在 TPC-C 测试中增加新订单事务的比例，您可以找到相关的 <transactiontype> 标签并调整它的 ratio 属性。例如：

xml
Copy code
<transactiontypes>
    <transactiontype>
        <name>NewOrder</name>
        <ratio>45</ratio> <!-- 调整为更高的比例 -->
    </transactiontype>
    <!-- 其他事务类型 -->
</transactiontypes>
请注意，调整事务比例时要确保所有事务类型的比例总和为 100。

注意事项：
确保您了解每个配置选项的含义，以避免非预期的测试结果。
对于复杂的调整，参考 BenchBase 的文档或查阅相关的在线资源可能会有帮助。

















在 BenchBase（原 OLTPBench）进行 TPC-C 基准测试时，您完全可以选择使用一个静态数据库，即不进行动态插入或删除操作，只执行查询操作。这通常意味着您会跳过数据加载步骤，并且可能需要调整配置文件以只执行查询相关的事务。以下是如何根据这个要求修改配置文件的步骤：

1. 选择正确的事务类型
在 TPC-C 测试中，某些事务类型（如“新订单”和“支付”）涉及插入和更新操作，而其他事务类型（如“订单状态”和“库存级别”）主要是查询操作。
您需要在配置文件中禁用涉及插入和更新的事务类型，并只启用查询类型的事务。
2. 修改事务比例
在配置文件的 <transactiontypes> 部分，将涉及插入和删除的事务类型的比例设置为0，将查询类事务的比例相应增加。
确保所有启用的事务类型的比例总和为 100。
3. 禁用数据加载
在配置文件中设置 <load> 标签为 false，这样在测试开始时不会加载任何新数据。
示例：
假设您只想执行“订单状态”（Order-Status）和“库存级别”（Stock-Level）这两种查询类型的事务。您的 <transactiontypes> 部分可能看起来像这样：

xml
Copy code
<transactiontypes>
    <transactiontype>
        <name>NewOrder</name>
        <ratio>0</ratio>
    </transactiontype>
    <transactiontype>
        <name>Payment</name>
        <ratio>0</ratio>
    </transactiontype>
    <transactiontype>
        <name>OrderStatus</name>
        <ratio>50</ratio>
    </transactiontype>
    <transactiontype>
        <name>Delivery</name>
        <ratio>0</ratio>
    </transactiontype>
    <transactiontype>
        <name>StockLevel</name>
        <ratio>50</ratio>
    </transactiontype>
</transactiontypes>
在 <load> 部分，设置为不加载数据：

xml
Copy code
<load>false</load>
注意事项：
确保您的数据库中已经有足够的数据来支持这些查询，因为配置文件设置为不加载新数据。
修改配置文件时，务必确保 XML 格式正确，避免语法错误。
调整事务比例和类型时，确保您的测试仍然能够达到您的测试目的。完全禁用某些事务类型可能会影响基准测试的有效性和全面性。











































xu@ubuntu20:~/be$ mkdir build
xu@ubuntu20:~/be$ cd build
xu@ubuntu20:~/be/build$  cmake ..
-- The C compiler identification is GNU 9.4.0
-- The CXX compiler identification is GNU 9.4.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Configuring done
-- Generating done
-- Build files have been written to: /home/xu/be/build
xu@ubuntu20:~/be/build$ make
Scanning dependencies of target bestie
[ 25%] Building CXX object CMakeFiles/bestie.dir/main.cpp.o
[ 50%] Building CXX object CMakeFiles/bestie.dir/bestie.cpp.o
[ 75%] Building CXX object CMakeFiles/bestie.dir/sse_benchmark.cpp.o
[100%] Linking CXX executable bestie
[100%] Built target bestie
xu@ubuntu20:~/be/build$ ./bestie
read 15 add records 

encryption time cost: 
	totally 15 records, total 117.766 us
	average time 7.85107 us
length of a ciphertext is 144 bytes

generating delete ciphertexts time cost: 
	total 15, time cost: 83.905 us
	average 5.59367 us

length of a deleting ciphertext is 144 bytes

Searching for keyword: 2001
	Totally find 4 records and the last file ID is dsghsfhg
	Time cost of client is 13.648000 us, average is 3.412000
	Time cost of server is 666.450000 us, average is 166.612500
	Time cost of the whole search phase is 680.098000 us
	Average time cost is 170.024500 us
	Total data exchanged are 644 Bytes, 0 KB, 0 MB 

Searching for keyword: jkdfjdfg
	Totally find 3 records and the last file ID is dsghsfhg
	Time cost of client is 6.626000 us, average is 2.208667
	Time cost of server is 98.686000 us, average is 32.895333
	Time cost of the whole search phase is 105.312000 us
	Average time cost is 35.104000 us
	Total data exchanged are 500 Bytes, 0 KB, 0 MB 

Searching for keyword: tyyg
	Totally find 1 records and the last file ID is sdfghvb
	Time cost of client is 5.188000 us, average is 5.188000
	Time cost of server is 95.129000 us, average is 95.129000
	Time cost of the whole search phase is 100.317000 us
	Average time cost is 100.317000 us
	Total data exchanged are 212 Bytes, 0 KB, 0 MB 

Searching for keyword: yud
	Totally find 2 records and the last file ID is dfgdsafgdjh
	Time cost of client is 5.679000 us, average is 2.839500
	Time cost of server is 104.586000 us, average is 52.293000
	Time cost of the whole search phase is 110.265000 us
	Average time cost is 55.132500 us
	Total data exchanged are 356 Bytes, 0 KB, 0 MB 

Searching for keyword: sdf
	Totally find 5 records and the last file ID is ddsfgfh
	Time cost of client is 6.262000 us, average is 1.252400
	Time cost of server is 100.608000 us, average is 20.121600
	Time cost of the whole search phase is 106.870000 us
	Average time cost is 21.374000 us
	Total data exchanged are 788 Bytes, 0 KB, 0 MB 



Begin test deletions
 found 4 ciphertexts

Searching for keyword: 2001
Deletion Portion: 0.100000 and deleted entries is: 0
	Totally find 4
	Time cost of client is 12.653000 us, average is 3.163250
	Time cost of server is 697.872000 us, average is 174.468000
	Time cost of the whole search phase is 710.525000 us
	Average time cost is 177.631250 us
	Total data exchanged are 644 Bytes

 found 4 ciphertexts

Searching for keyword: 2001
Deletion Portion: 0.200000 and deleted entries is: 0
	Totally find 4
	Time cost of client is 11.314000 us, average is 2.828500
	Time cost of server is 125.122000 us, average is 31.280500
	Time cost of the whole search phase is 136.436000 us
	Average time cost is 34.109000 us
	Total data exchanged are 644 Bytes

 found 3 ciphertexts

Searching for keyword: 2001
Deletion Portion: 0.300000 and deleted entries is: 1
	Totally find 3
	Time cost of client is 5.718000 us, average is 1.906000
	Time cost of server is 123.024000 us, average is 41.008000
	Time cost of the whole search phase is 128.742000 us
	Average time cost is 42.914000 us
	Total data exchanged are 500 Bytes

 found 3 ciphertexts

Searching for keyword: 2001
Deletion Portion: 0.400000 and deleted entries is: 1
	Totally find 3
	Time cost of client is 6.039000 us, average is 2.013000
	Time cost of server is 130.482000 us, average is 43.494000
	Time cost of the whole search phase is 136.521000 us
	Average time cost is 45.507000 us
	Total data exchanged are 500 Bytes

 found 2 ciphertexts

Searching for keyword: 2001
Deletion Portion: 0.500000 and deleted entries is: 2
	Totally find 2
	Time cost of client is 5.131000 us, average is 2.565500
	Time cost of server is 131.907000 us, average is 65.953500
	Time cost of the whole search phase is 137.038000 us
	Average time cost is 68.519000 us
	Total data exchanged are 356 Bytes

 found 2 ciphertexts

Searching for keyword: 2001
Deletion Portion: 0.600000 and deleted entries is: 2
	Totally find 2
	Time cost of client is 5.029000 us, average is 2.514500
	Time cost of server is 123.118000 us, average is 61.559000
	Time cost of the whole search phase is 128.147000 us
	Average time cost is 64.073500 us
	Total data exchanged are 356 Bytes

 found 2 ciphertexts

Searching for keyword: 2001
Deletion Portion: 0.700000 and deleted entries is: 2
	Totally find 2
	Time cost of client is 4.974000 us, average is 2.487000
	Time cost of server is 123.492000 us, average is 61.746000
	Time cost of the whole search phase is 128.466000 us
	Average time cost is 64.233000 us
	Total data exchanged are 356 Bytes

 found 1 ciphertexts

Searching for keyword: 2001
Deletion Portion: 0.800000 and deleted entries is: 3
	Totally find 1
	Time cost of client is 5.037000 us, average is 5.037000
	Time cost of server is 147.269000 us, average is 147.269000
	Time cost of the whole search phase is 152.306000 us
	Average time cost is 152.306000 us
	Total data exchanged are 212 Bytes

 found 1 ciphertexts

Searching for keyword: 2001
Deletion Portion: 0.900000 and deleted entries is: 3
	Totally find 1
	Time cost of client is 4.799000 us, average is 4.799000
	Time cost of server is 136.120000 us, average is 136.120000
	Time cost of the whole search phase is 140.919000 us
	Average time cost is 140.919000 us
	Total data exchanged are 212 Bytes

 found 0 ciphertexts

Searching for keyword: 2001
Deletion Portion: 1.000000 and deleted entries is: 4
	Totally find 0
	Time cost of client is 4.218000 us, average is inf
	Time cost of server is 131.622000 us, average is inf
	Time cost of the whole search phase is 135.840000 us
	Average time cost is inf us
	Total data exchanged are 68 Bytes

xu@ubuntu20:~/be/build$ 

